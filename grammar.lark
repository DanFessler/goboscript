start: declr*

?declr: "costumes" _stringlist _NL -> declr_costumes
  | "use" STRING _NL -> declr_use
  | "datalist" NAME STRING _NL -> datalist
  | "imagelist" NAME STRING [STRING] _NL -> imagelist
  | "def" NAME _namelist stack -> declr_function
  | "nowarp" "def" NAME _namelist stack -> declr_function_nowarp
  | "on" STRING stack -> declr_on
  | "onflag" stack -> declr_onflag
  | "onkey" STRING stack -> declr_onkey
  | "onclick" stack -> declr_onclick
  | "onbackdrop" STRING stack -> declr_onbackdrop
  | "onloudness" expr stack -> declr_onloudness
  | "ontimer" expr stack -> declr_ontimer
  | "onclone" stack -> declr_onclone
  | "macro" MACROVAR _macrovarlist stack -> declr_block_macro
  | "macro" MACROVAR "(" _macrovarlist ")" "->" expr _NL -> declr_macro
  | LCOMMENT -> declr_comment

stack: "{" block* "}"

?block: _lvalue "=" expr _NL -> varset
  | "local" _lvalue "=" expr _NL -> localvar
  | _lvalue "++" _NL      -> varinc
  | _lvalue "+=" expr _NL -> varchange
  | _lvalue "-=" expr _NL -> varsub
  | _lvalue "*=" expr _NL -> varmul
  | _lvalue "/=" expr _NL -> vardiv
  | _lvalue "%=" expr _NL -> varmod
  | _lvalue "&=" expr _NL -> varjoin
  | "if" expr stack -> block_if
  | "if" expr stack "else" stack -> block_if_else
  | "if" expr stack ("elif" expr stack)+ -> block_if_elif
  | "if" expr stack ("elif" expr stack)+ "else" stack -> block_if_elif_else
  | "until" expr stack -> until
  | "forever" stack -> forever
  | "repeat" expr stack -> repeat
  | _lvalue "=" "[" _exprlist "]" _NL -> listset
  | _lvalue ".add" expr _NL -> listadd
  | _lvalue ".delete" expr _NL -> listdelete
  | _lvalue ".insert" expr "," expr _NL -> listinsert
  | _lvalue "[" expr "]"  "=" expr _NL -> listreplace
  | _lvalue "[" expr "]" "+=" expr _NL -> listreplaceadd
  | _lvalue "[" expr "]" "-=" expr _NL -> listreplacesub
  | _lvalue "[" expr "]" "*=" expr _NL -> listreplacemul
  | _lvalue "[" expr "]" "/=" expr _NL -> listreplacediv
  | _lvalue "[" expr "]" "%=" expr _NL -> listreplacemod
  | _lvalue "[" expr "]" "&=" expr _NL -> listreplacejoin
  | _lvalue ".show" _NL -> listshow
  | _lvalue ".hide" _NL -> listhide
  | MACROVAR _exprlist _NL -> block_macro
  | NAME _exprlist _NL [LCOMMENT]

_lvalue: IDENTIFIER|macrovar
macrovar: MACROVAR

?expr: cmp
  | expr "and" cmp  -> andop
  | expr "or" cmp   -> orop

?cmp: sum
  | "not" cmp     -> notop
  | cmp "in" sum  -> inop
  | cmp "=" sum   -> eq
  | cmp "!=" sum  -> neq
  | cmp "<" sum   -> lt
  | cmp ">" sum   -> gt
  | cmp "<=" sum  -> le
  | cmp ">=" sum  -> ge

?sum: product
  | sum "+" product  -> add
  | sum "-" product  -> sub

?product: atom
  | product "*" atom  -> mul
  | product "/" atom  -> div
  | product "%" atom  -> mod
  | product "&" atom  -> join

?atom: NUMBER | STRING | FLOAT | CONST
  | "-" atom                    -> minus
  | IDENTIFIER                  -> var
  | ARGUMENT                    -> argument
  | macrovar
  | NAME "(" _exprlist ")"      -> reporter
  | MACROVAR "(" _exprlist ")"  -> macro
  | NAME "[" expr "]"           -> listitem
  | NAME ".index" "(" expr ")"  -> listindex
  | NAME ".length"              -> listlength
  | "(" expr ")"

_exprlist: [expr ("," expr)*]
_stringlist: [STRING ("," STRING)*]
_namelist: [NAME ("," NAME)*]
_macrovarlist: [NAME ("," NAME)*]

MACROVAR: /[_a-zA-Z][_a-zA-Z0-9]*\!/
ARGUMENT: /\$[_a-zA-Z][_a-zA-Z0-9]*/
IDENTIFIER: (NAME ":" NAME) | NAME
NAME: /[_a-zA-Z][_a-zA-Z0-9]*/
STRING: /"([^"\\]|\\.)*"/
NUMBER: /-?[0-9]+/
FLOAT: /-?[0-9]+\.[0-9]+/
CONST: "true" | "false"
_NL: "\n"
COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//
SCOMMENT: /\/\/.*/
LCOMMENT: "(*" /(.|\n)+/ "*)"
%ignore " "
%ignore "\n"
%ignore "\t"
%ignore COMMENT
%ignore SCOMMENT
